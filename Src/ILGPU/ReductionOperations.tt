// -----------------------------------------------------------------------------
//                                    ILGPU
//                     Copyright (c) 2016-2017 Marcel Koester
//                                www.ilgpu.net
//
// File: ReductionOperations.tt/ReductionOperations.cs
//
// This file is part of ILGPU and is distributed under the University of
// Illinois Open Source License. See LICENSE.txt for details
// -----------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="Basic.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var reductionTypes = NumericTypes;
var operations = new []
    {
        new { Name = "Add", NeutralElement = "0", Prefix = "", Operation = " + ", Suffix = "" },
        new { Name = "Mul", NeutralElement = "1", Prefix = "", Operation = " * ", Suffix = "" },
        new { Name = "Max", NeutralElement = "{0}.MinValue", Prefix = "GPUMath.Max(", Operation = ", ", Suffix = ")" },
        new { Name = "Min", NeutralElement = "{0}.MaxValue", Prefix = "GPUMath.Min(", Operation = ", ", Suffix = ")" },
    };
#>
using System;
using System.Diagnostics.CodeAnalysis;

#pragma warning disable IDE0004 // Cast is redundant

namespace ILGPU.ReductionOperations
{
<#  foreach (var type in reductionTypes) { #>
<#      foreach (var op in operations) { #>
    /// <summary>
    /// Represents an <#= op.Name #> reduction of type <#= type.Type #>.
    /// </summary>
<#      if (type.IsUnsignedInt || type.Name.Contains("Int8")) { #>
    [CLSCompliant(false)]
<#      } #>
    [SuppressMessage("Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes")]
    public struct <#= op.Name #><#= type.Name #> : IReduction<<#= type.Type #>>
    {
        /// <summary>
        /// Returns the neutral element of this reduction operation, such that
        /// Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
        /// </summary>
        public <#= type.Type #> NeutralElement => <#= string.Format(op.NeutralElement, type.Type) #>;

        /// <summary>
        /// Performs a reduction of the form result = Reduce(left, right).
        /// </summary>
        /// <param name="left">The left value of the reduction.</param>
        /// <param name="right">The right value of the reduction.</param>
        /// <returns>The result of the reduction.</returns>
        public <#= type.Type #> Reduce(<#= type.Type #> left, <#= type.Type #> right)
        {
            return (<#= type.Type #>)(<#= op.Prefix #>left<#= op.Operation #>right<#= op.Suffix #>);
        }
    }

<#      } #>
<#  } #>
}

#pragma warning restore IDE0004