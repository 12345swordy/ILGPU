<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CustomExceptionSemantics" xml:space="preserve">
    <value>Method '{0}' has custom exception semantics.</value>
  </data>
  <data name="InvalidEntryPointIndexParameter" xml:space="preserve">
    <value>An entry point must receive at least one index parameter</value>
  </data>
  <data name="InvalidEntryPointIndexParameterOfWrongType" xml:space="preserve">
    <value>An entry point must receive a compatible index type as first parameter</value>
  </data>
  <data name="InvalidEntryPointInstanceKernelMethod" xml:space="preserve">
    <value>Only static methods are supported at the moment</value>
  </data>
  <data name="InvalidILCode" xml:space="preserve">
    <value>Invalid IL Code</value>
  </data>
  <data name="InvalidMathIntrinsic" xml:space="preserve">
    <value>Invalid math-intrinsic implementation of '{0}'</value>
  </data>
  <data name="InvalidUseOfVariableViewsInSharedMemory" xml:space="preserve">
    <value>Variable views cannot have a specified element count in shared memory. Consider using an array view instead.</value>
  </data>
  <data name="MismatchingTypes" xml:space="preserve">
    <value>The provided types '{0}' and '{1}' do not match</value>
  </data>
  <data name="NotSupportedArithmeticOperandTypes" xml:space="preserve">
    <value>Not supported arithmetic operands '{0}' &amp; '{1}'</value>
  </data>
  <data name="NotSupportedArrayCreation" xml:space="preserve">
    <value>Cannot create a dynamically sized array on an accelerator</value>
  </data>
  <data name="NotSupportedArrayElementType" xml:space="preserve">
    <value>The array type '{0}' uses a non-value element type</value>
  </data>
  <data name="NotSupportedBoxing" xml:space="preserve">
    <value>Boxing a value is currently not supported</value>
  </data>
  <data name="NotSupportedClassType" xml:space="preserve">
    <value>Class type '{0}' is not supported</value>
  </data>
  <data name="NotSupportedCompareOperation" xml:space="preserve">
    <value>Not supported compare operation of types '{0}' &amp; '{1}'</value>
  </data>
  <data name="NotSupportedCompareOrArithmeticValue" xml:space="preserve">
    <value>Not supported compare or arithmetic value of type '{0}'</value>
  </data>
  <data name="NotSupportedConversion" xml:space="preserve">
    <value>Not supported conversion</value>
  </data>
  <data name="NotSupportedFloatComparison" xml:space="preserve">
    <value>Not supported float comparison of type '{0}'</value>
  </data>
  <data name="NotSupportedFloatConversion" xml:space="preserve">
    <value>Not supported float conversion</value>
  </data>
  <data name="NotSupportedGenericType" xml:space="preserve">
    <value>Generic type '{0}' without required type arguments cannot be converted to an object type</value>
  </data>
  <data name="NotSupportedILInstruction" xml:space="preserve">
    <value>Not supported IL instruction in method of type '{0}'</value>
  </data>
  <data name="NotSupportedILInstructionPossibleLambda" xml:space="preserve">
    <value>Not supported IL instruction in method of type '{0}'. Are you using a lambda closure?</value>
  </data>
  <data name="NotSupportedIndirectMethodCall" xml:space="preserve">
    <value>Not supported indirect call to a method with the signature '{0}'</value>
  </data>
  <data name="NotSupportedInstruction" xml:space="preserve">
    <value>Not supported instruction in method '{0}' of type '{1}'.</value>
  </data>
  <data name="NotSupportedIntComparison" xml:space="preserve">
    <value>Not supported int comparison of type '{0}'</value>
  </data>
  <data name="NotSupportedIntConversion" xml:space="preserve">
    <value>Not supported int conversion</value>
  </data>
  <data name="NotSupportedInterfaceType" xml:space="preserve">
    <value>Interface type '{0}' is not supported</value>
  </data>
  <data name="NotSupportedIntOperand" xml:space="preserve">
    <value>Not supported int operand of type '{0}'</value>
  </data>
  <data name="NotSupportedIsInstance" xml:space="preserve">
    <value>IsInstance is currently not supported</value>
  </data>
  <data name="NotSupportedKernelParameterType" xml:space="preserve">
    <value>Not supported kernel-parameter type '{0}'</value>
  </data>
  <data name="NotSupportedLoadOfStaticField" xml:space="preserve">
    <value>Cannot load from the static field '{0}' since it is not read only</value>
  </data>
  <data name="NotSupportedLoadOfStaticFieldAddress" xml:space="preserve">
    <value>Cannot take address of the static field '{0}'</value>
  </data>
  <data name="NotSupportedMethodJump" xml:space="preserve">
    <value>Not supported jump to method '{0}'</value>
  </data>
  <data name="NotSupportedPointerConversion" xml:space="preserve">
    <value>Not supported pointer conversion</value>
  </data>
  <data name="NotSupportedPointerToObjectType" xml:space="preserve">
    <value>Pointer type '{0}' cannot be converted to an object type</value>
  </data>
  <data name="NotSupportedPrimitiveToObjectType" xml:space="preserve">
    <value>The primitive type '{0}' cannot be converted to an object type</value>
  </data>
  <data name="NotSupportedRecursiveProgram" xml:space="preserve">
    <value>Not supported recursive program</value>
  </data>
  <data name="NotSupportedRuntimeMethod" xml:space="preserve">
    <value>Not supported runtime method '{0}'</value>
  </data>
  <data name="NotSupportedStoreToStaticField" xml:space="preserve">
    <value>Cannot store a value to the static field '{0}'</value>
  </data>
  <data name="NotSupportedStringOperation" xml:space="preserve">
    <value>String operations are not supported</value>
  </data>
  <data name="NotSupportedStructDueToExplicitPacking" xml:space="preserve">
    <value>The struct type '{0}' requires an explicit packing</value>
  </data>
  <data name="NotSupportedStructDueToExplicitSize" xml:space="preserve">
    <value>The struct type '{0}' requires an explicit size</value>
  </data>
  <data name="NotSupportedStructDueToNonAnsiCharSet" xml:space="preserve">
    <value>The struct type '{0}' requires a non-ansi charset</value>
  </data>
  <data name="NotSupportedStructDueToNonSequentialMemoryLayout" xml:space="preserve">
    <value>The struct type '{0}' requires a non-sequential memory layout</value>
  </data>
  <data name="NotSupportedType" xml:space="preserve">
    <value>Not supported type '{0}'</value>
  </data>
  <data name="NotSupportedUnboxing" xml:space="preserve">
    <value>Unboxing a value is currently not supported</value>
  </data>
  <data name="NotSupportedUnsafeAllocation" xml:space="preserve">
    <value>Not supported unsafe allocation on stack</value>
  </data>
  <data name="NotSupportedUnsignedToFloatConversion" xml:space="preserve">
    <value>Not supported unsigned to float conversion</value>
  </data>
  <data name="NotSupportedUseOfSharedMemory" xml:space="preserve">
    <value>Shared memory can only be used in the context of a grouped kernel. Consider using a grouped index.</value>
  </data>
  <data name="NotSupportedValue" xml:space="preserve">
    <value>Not supported value '{0}' of type '{1}'</value>
  </data>
  <data name="NotSupportedVirtualMethodCall" xml:space="preserve">
    <value>Not supported virtual call to method '{0}'</value>
  </data>
  <data name="NotSupportedVirtualMethodCallToObject" xml:space="preserve">
    <value>Not supported virtual call to method '{0}' defined in type '{1}' that was called on '{2}'</value>
  </data>
  <data name="NotSupportedVirtualMethodCallToUnconstrainedInstance" xml:space="preserve">
    <value>Calling the virtual method '{0}' of unconstrained instance is not supported</value>
  </data>
  <data name="WrongArrayType" xml:space="preserve">
    <value>The type '{0}' does not represent an array type</value>
  </data>
  <data name="NativePlatformInvocationRequired" xml:space="preserve">
    <value>This operation is only permitted in native-OS-platform mode. The current runtime is '{0}' but the native OS platform is '{1}'</value>
  </data>
  <data name="NotSupportedBackend" xml:space="preserve">
    <value>Not supported backend</value>
  </data>
  <data name="NotSupportedSharedMemoryVariableType" xml:space="preserve">
    <value>Not supported shared-memory variable of type '{0}'</value>
  </data>
  <data name="NotSupportedTargetPlatform" xml:space="preserve">
    <value>Not supported target platform</value>
  </data>
  <data name="CouldNotGenerateMachineCode" xml:space="preserve">
    <value>Could not generate machine code: '{0}'</value>
  </data>
  <data name="CouldNotLoadLibDevice" xml:space="preserve">
    <value>Could not load lib-device library: '{0}'</value>
  </data>
  <data name="CouldNotReadLibDevice" xml:space="preserve">
    <value>Could not read lib-device library: '{0}'</value>
  </data>
  <data name="CudaPathNotFound" xml:space="preserve">
    <value>Cuda path could not be determined automatically. Custom device library could not be found.</value>
  </data>
  <data name="CustomABIImplementationRequired" xml:space="preserve">
    <value>The type '{0}' requires a custom ABI implementation</value>
  </data>
  <data name="ExplicitMemoryOffsetRequired" xml:space="preserve">
    <value>The field '{0}.{1}' requires an explicit memory offset</value>
  </data>
  <data name="LibDeviceNotFound" xml:space="preserve">
    <value>Could not find a compatible lib-device library</value>
  </data>
  <data name="LibDevicePathNotFound" xml:space="preserve">
    <value>Custom device-library path could not be determined automatically. Try specifying the path explicitly.</value>
  </data>
  <data name="LLVMModuleVerificationFailed" xml:space="preserve">
    <value>LLVM-module verification failed: {0}</value>
  </data>
  <data name="NotSupportedAtomicOperation" xml:space="preserve">
    <value>Atomic operation of type '{0}' is not supported</value>
  </data>
  <data name="NotSupportedCompileUnit" xml:space="preserve">
    <value>Not supported compile unit</value>
  </data>
  <data name="NotSupportedGridIntrinsic" xml:space="preserve">
    <value>Not supported grid intrinsic of type '{0}'</value>
  </data>
  <data name="NotSupportedGroupIntrinsic" xml:space="preserve">
    <value>Not supported group intrinsic of type '{0}'</value>
  </data>
  <data name="NotSupportedMathIntrinsic" xml:space="preserve">
    <value>Not supported math intrinsic of type '{0}'</value>
  </data>
  <data name="NotSupportedMemoryFenceOperation" xml:space="preserve">
    <value>Not supported memory-fence operation of type '{0}'</value>
  </data>
  <data name="NotSupportedWarpIntrinsic" xml:space="preserve">
    <value>Not supported warp intrinsic of type '{0}'</value>
  </data>
  <data name="CannotFindFieldOfType" xml:space="preserve">
    <value>Cannot find the field '{0}' of type '{1}'</value>
  </data>
  <data name="CannotTakeFieldOffsetOfPrimitiveType" xml:space="preserve">
    <value>Cannot take field offset of primitive type '{0}'</value>
  </data>
  <data name="NotSupportedIntrinsic" xml:space="preserve">
    <value>Not supported intrinsic type '{0}'</value>
  </data>
  <data name="CannotLoadLLVMLib" xml:space="preserve">
    <value>Cannot load required LLVM library</value>
  </data>
  <data name="NativeMethodNotSupported" xml:space="preserve">
    <value>Native method '{0}' is not supported</value>
  </data>
  <data name="NotSupportedGenericMethod" xml:space="preserve">
    <value>Not supported generic method '{0}'</value>
  </data>
  <data name="RuntimeInternalMethodNotSupported" xml:space="preserve">
    <value>Runtime-internal method '{0}' is not supported</value>
  </data>
  <data name="NotSupportedWarpShuffle" xml:space="preserve">
    <value>The warp-shuffle function '{0}' is not supported in the scope of implicitly-grouped kernels</value>
  </data>
  <data name="NotSupportedActivatorOperation" xml:space="preserve">
    <value>The operation '{0}' on the .Net activator is not supported.</value>
  </data>
  <data name="NotSupportedPlatform" xml:space="preserve">
    <value>Not supported platform '{0}' ({1} required)</value>
  </data>
  <data name="NotSupportedGroupBarrier" xml:space="preserve">
    <value>The group-barrier function '{0}' is not supported in the scope of implicitly-grouped kernels</value>
  </data>
  <data name="NotSupportedSizeOf" xml:space="preserve">
    <value>Could not resolve the native size of the type '{0}'</value>
  </data>
  <data name="CouldNotDeserializeMethod" xml:space="preserve">
    <value>Could not load method '{0}'</value>
  </data>
  <data name="CouldNotDeserializeType" xml:space="preserve">
    <value>Could not load type '{0}'</value>
  </data>
  <data name="ContextFlagsAreNotCompatible" xml:space="preserve">
    <value>The context flags '{0}' of the deserialized context are not compatible with the current flags '{1}'</value>
  </data>
  <data name="AssemblyVersionNotCompatible" xml:space="preserve">
    <value>The assembly version '{0}' is not compatible with the current version '{1}'</value>
  </data>
  <data name="AllocaAnalysisRequiresTopLevelFunction" xml:space="preserve">
    <value>The allocation analysis requires a top-level function</value>
  </data>
  <data name="CannotDeserializeDuplicateNodeId" xml:space="preserve">
    <value>Duplicate node id '{0}' detected</value>
  </data>
</root>